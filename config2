/* * COPYRIGHT. HSBC HOLDINGS PLC 2016. ALL RIGHTS RESERVED. * * This software is only to be used for the purpose for which it has been * provided. No part of it is to be reproduced, disassembled, transmitted, * stored in a retrieval system nor translated in any human or computer * language in any way or for any other purposes whatsoever without the prior * written consent of HSBC Holdings plc. */package com.hsbc.amg.common.sftp.dao;
import static org.junit.Assert.assertTrue;
import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;
import org.apache.commons.io.FileUtils;
import com.hsbc.amg.common.utility.GenericFunctions;
import com.jcraft.jsch.Channel;import com.jcraft.jsch.ChannelSftp;import com.jcraft.jsch.JSch;import com.jcraft.jsch.JSchException;import com.jcraft.jsch.ProxySOCKS5;import com.jcraft.jsch.Session;import com.jcraft.jsch.SftpException;
/** * <p> * <b> TODO : Insert description of the class's responsibility/role. </b> * </p> */public class SftpConnectionDAOImp implements SftpConnectionDAO {
    public SftpConnectionDAOImp() {}
    static Session session = null;    static Channel channel = null;    static InputStream in = null;    static OutputStream out = null;
    public Session sftpConnection(final String value, final String sftpUser, final String sftpHost, final int sftpPort,        final String sftpPass) {        System.out.println("preparing the host information for sftp.");        try {            JSch jsch = new JSch();            SftpConnectionDAOImp.session = jsch.getSession(sftpUser, sftpHost, sftpPort);            if (value.equals("puttyServer")) {                SftpConnectionDAOImp.session.setProxy(new ProxySOCKS5("Intpxy6.hk.hsbc", Integer.parseInt("1080")));            }            SftpConnectionDAOImp.session.setPassword(sftpPass);            java.util.Properties config = new java.util.Properties();            config.put("StrictHostKeyChecking", "no");            SftpConnectionDAOImp.session.setConfig(config);            SftpConnectionDAOImp.session.connect();            return SftpConnectionDAOImp.session;        } catch (Exception ex) {            assertTrue("Exception found while tranfer the response.", false);            ex.printStackTrace();        }        return null;    }
    @Override    public boolean isFileExistonServer(final String value, final String sftpUser, final String sftpHost, final int sftpPort,        final String sftpPass, final String filePath) throws InterruptedException {        System.out.println("Checking file is present at " + filePath);        Session session = sftpConnection(value, sftpUser, sftpHost, sftpPort, sftpPass);        try {            SftpConnectionDAOImp.channel = session.openChannel("sftp");            SftpConnectionDAOImp.channel.connect();            SftpConnectionDAOImp.channel.run();            ChannelSftp channelSftp = (ChannelSftp) SftpConnectionDAOImp.channel;            boolean isExist = false;            int tries = 0;            while (!isExist && tries <= 15) {                try {                    channelSftp.lstat(filePath);                    isExist = true;                } catch (Exception e) {                    Thread.sleep(1000);                    tries++;                }            }            channelSftp.disconnect();            return isExist;        } catch (JSchException e) {            e.printStackTrace();            assertTrue("Exception found.", false);        } finally {            SftpConnectionDAOImp.channel.disconnect();            SftpConnectionDAOImp.session.disconnect();        }        return false;    }
    @Override    public void sendFileToServer(final String value, final String sftpUser, final String sftpHost, final int sftpPort,        final String sftpPass, final String output) throws FileNotFoundException {        try {            System.out.println("Host connected.");            Session session = sftpConnection(value, sftpUser, sftpHost, sftpPort, sftpPass);            SftpConnectionDAOImp.channel = session.openChannel("sftp");            SftpConnectionDAOImp.channel.connect();            ChannelSftp channelSftp = (ChannelSftp) SftpConnectionDAOImp.channel;            channelSftp.cd(output);            File localFile = new File(GenericFunctions.TESTDATA_FILE_PATH);            File[] files = localFile.listFiles();            if (value.equals("puttyServer")) {                channelSftp.put(new FileInputStream(localFile), getdataFileName());                channelSftp.put(new FileInputStream(localFile), getControlFileName());            }            for (int count = 0; count < files.length; count++) {                // if (files[count].getName().contains(fileName)) {                channelSftp.put(new FileInputStream(files[count]), files[count].getName());                // }                System.out.println("file " + ":" + files[count].getName() + " send to drop location");            }            channelSftp.disconnect();        } catch (JSchException e) {            assertTrue("Execption for sending file", false);            e.printStackTrace();        } catch (SftpException e) {            assertTrue("Execption for sending file", false);        } finally {            SftpConnectionDAOImp.channel.disconnect();            SftpConnectionDAOImp.session.disconnect();        }    }
    @Override    public void sendSingleFileToServer(final String value, final String sftpUser, final String sftpHost, final int sftpPort,        final String sftpPass, final String output) throws FileNotFoundException {        try {            System.out.println("Host connected.");            Session session = sftpConnection(value, sftpUser, sftpHost, sftpPort, sftpPass);            SftpConnectionDAOImp.channel = session.openChannel("sftp");            SftpConnectionDAOImp.channel.connect();            ChannelSftp channelSftp = (ChannelSftp) SftpConnectionDAOImp.channel;            channelSftp.cd(output);            String newFileName = GenericFunctions.getFileName().get("newFileName");            if (value.equals("puttyServer")) {                channelSftp.put(new FileInputStream(GenericFunctions.TESTDATA_FILE_PATH), getdataFileName());                channelSftp.put(new FileInputStream(GenericFunctions.TESTDATA_FILE_PATH), getControlFileName());            } else {                channelSftp.put(new FileInputStream(GenericFunctions.TESTDATA_FILE_PATH + newFileName), newFileName);                System.out.println("file" + newFileName + "send to drop location");            }        } catch (JSchException e) {            e.printStackTrace();            assertTrue("Execption for sending file", false);        } catch (SftpException e) {            assertTrue("Execption for sending file", false);        } finally {            SftpConnectionDAOImp.channel.disconnect();            SftpConnectionDAOImp.session.disconnect();        }    }
    @Override    public boolean compareInAndOutFile(final String value, final String sftpUser, final String sftpHost, final int sftpPort,        final String sftpPass, final String output, final String fileName) throws IOException {        downloadFile(value, sftpUser, sftpHost, sftpPort, sftpPass, output, fileName);        File downLoadFile = new File("src/main/resources/com/hsbc/amg/DownloadFile/" + fileName);        File testDataFile = new File("src/main/resources/com/hsbc/amg/testData/" + fileName);        return FileUtils.contentEquals(downLoadFile, testDataFile);    }
    public void downloadFile(final String value, final String sftpUser, final String sftpHost, final int sftpPort,        final String sftpPass, final String output, final String fileName) throws IOException {        try {            Session session = sftpConnection(value, sftpUser, sftpHost, sftpPort, sftpPass);            SftpConnectionDAOImp.channel = session.openChannel("sftp");            SftpConnectionDAOImp.channel.connect();            ChannelSftp channelSftp = (ChannelSftp) SftpConnectionDAOImp.channel;            channelSftp.cd(output);            SftpConnectionDAOImp.in = channelSftp.get(fileName);            SftpConnectionDAOImp.out = new FileOutputStream("src/main/resources/com/hsbc/amg/DownloadFile/" + fileName);            byte[] buf = new byte[1024];            int len;            while ((len = SftpConnectionDAOImp.in.read(buf)) > 0) {                SftpConnectionDAOImp.out.write(buf, 0, len);            }        } catch (Exception ex) {            assertTrue("Execption for sending file", false);            ex.printStackTrace();        } finally {            SftpConnectionDAOImp.in.close();            SftpConnectionDAOImp.out.close();        }    }
    public String getdataFileName() {        File dir = new File(GenericFunctions.TESTDATA_FILE_PATH);        File[] files = dir.listFiles();        for (File file : files) {            if (file.getName().contains(".csv")) {                return file.getName();            }        }        return null;    }
    public String getControlFileName() {        String ctlFile = GenericFunctions.getFileName().get("oldFileName");        ctlFile = ctlFile.replace(".csv", ".ctl");        return ctlFile;    }
}
