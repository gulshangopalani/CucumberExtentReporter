/* * COPYRIGHT. HSBC HOLDINGS PLC 2017. ALL RIGHTS RESERVED. * * This software is only to be used for the purpose for which it has been * provided. No part of it is to be reproduced, disassembled, transmitted, * stored in a retrieval system nor translated in any human or computer * language in any way or for any other purposes whatsoever without the prior * written consent of HSBC Holdings plc. */package com.hsbc.amg.common.sftp.dao;
import java.io.File;import java.util.Iterator;import java.util.List;import java.util.Map;
import org.springframework.jdbc.core.JdbcTemplate;
import com.hsbc.amg.common.utility.GenericFunctions;
/** * <p> * <b> TODO : Insert description of the class's responsibility/role. </b> * </p> */public class DataBaseDAOImpl implements DataBaseDAO {
    private JdbcTemplate jdbcTemplate;
    public void setJdbcTemplate(final JdbcTemplate jdbcTemplate) {        this.jdbcTemplate = jdbcTemplate;    }
    public String getOutPutFileName(final String fileName, final String status) {        String query = "select name, value from " + "amgaipdb" + ".eventshub.metadata where event_id in (select e.event_id from "            + "amgaipdb" + ".eventshub.events e inner join " + "amgaipdb"            + ".eventshub.metadata m on e.event_id = m.event_id where  m.value in ('" + fileName + "') and status = '" + status            + "')";        List<Map<String, Object>> values = this.jdbcTemplate.queryForList(query);        if (values != null && !values.isEmpty()) {            for (Map<String, Object> value : values) {                if ("outputFileName".equals(value.get("name"))) {                    return (String) value.get("value");                } else if ("OutputFilename".equals(value.get("name"))) {                    return (String) value.get("value");                }            }        }        return null;    }
    public String getOutPutTransformedFileName(final String fileName, final String status) {        StringBuilder query = new StringBuilder("select value from " + "amgaipdb"            + ".eventshub.metadata where event_id in (select e.event_id from " + "amgaipdb" + ".eventshub.events e inner join "            + "amgaipdb" + ".eventshub.metadata m on e.event_id = m.event_id where  m.value in ('" + fileName + "') and status = '"            + status + "') and name='filename' and value like '%.zip%'");        return this.jdbcTemplate.queryForObject(query.toString(), String.class);    }
    @Override    public String getValueOfFileName(final String fileName) {        StringBuilder query = new StringBuilder(            "select top 1 value from " + "amgaipdb" + ".eventshub.metadata k where k.value like '%" + fileName + "%'");        return this.jdbcTemplate.queryForObject(query.toString(), String.class);    }
    @Override    public boolean getEventId(final String fileName) {        int tries = 0;        while (tries <= 100) {            String sqlQuery = "select e.event_id from " + "amgaipdb" + ".eventshub.events e inner join " + "amgaipdb"                + ".eventshub.metadata m on e.event_id = m.event_id where m.value = '" + fileName + "' order by e.event_id desc";            List<String> rest = this.jdbcTemplate.queryForList(sqlQuery, String.class);            try {                tries++;                if (rest.size() >= 1) {                    System.out.println(rest);                    return true;                }                Thread.sleep(1000);            } catch (Exception e) {                e.printStackTrace();            }        }        return false;    }
    public boolean checkFileExistInDB(final String fileName) {        String sqlQuery = "select e.event_id from " + "amgaipdb" + ".eventshub.events e inner join " + "amgaipdb"            + ".eventshub.metadata m on e.event_id = m.event_id where m.value = '" + fileName + "' order by e.event_id desc";        List<String> rest = this.jdbcTemplate.queryForList(sqlQuery, String.class);        try {            if (rest.size() >= 1) {                return true;            }        } catch (Exception e) {            e.printStackTrace();            return false;        }        return false;    }
    @Override    public boolean getAllEvents() {        File localFile = new File(GenericFunctions.TESTDATA_FILE_PATH);        File[] files = localFile.listFiles();        for (int count = 0; count < files.length; count++) {            String fileName = files[count].getName();            String query = "select * from " + "amgaipdb" + ".eventshub.events e inner join " + "amgaipdb"                + ".eventshub.metadata m on e.event_id = m.event_id where  m.value = '" + fileName + "';";            List<Map<String, Object>> values = this.jdbcTemplate.queryForList(query);            if (values != null && !values.isEmpty()) {                for (Map<String, Object> value : values) {                    for (Iterator<Map.Entry<String, Object>> it = value.entrySet().iterator(); it.hasNext();) {                        Map.Entry<String, Object> entry = it.next();                        String key = entry.getKey();                        Object keyValue = entry.getValue();                        System.out.println(key + " = " + keyValue);                        if (key.equals("status") && (keyValue.equals("failed") || keyValue.equals("processed"))) {                            return false;                        }                    }                }            }            System.out.println();        }        return true;    }
    public boolean getEventsForAllFiles(final String fileName) {        String query = "select * from " + "amgaipdb" + ".eventshub.events e inner join " + "amgaipdb"            + ".eventshub.metadata m on e.event_id = m.event_id where  m.value = '" + fileName + "';";        List<Map<String, Object>> values = this.jdbcTemplate.queryForList(query);        if (values != null && !values.isEmpty()) {            for (Map<String, Object> value : values) {                for (Iterator<Map.Entry<String, Object>> it = value.entrySet().iterator(); it.hasNext();) {                    Map.Entry<String, Object> entry = it.next();                    String key = entry.getKey();                    Object keyValue = entry.getValue();                    System.out.println(key + " = " + keyValue);                    if (key.equals("status") && (keyValue.equals("failed") || keyValue.equals("processed"))) {                        return false;                    }                }            }        }        System.out.println();
        // }        return true;    }
    public List<Map<String, Object>> getEventID() {        File localFile = new File(GenericFunctions.TESTDATA_FILE_PATH);        File[] files = localFile.listFiles();        for (int count = 0; count < files.length; count++) {            String fileName = files[count].getName();            StringBuilder query = new StringBuilder(                "select e.event_id from" + "amgaipdb" + ".eventshub.events e, " + "amgaipdb" + ".eventshub.metadata m," + "amgaipdb"                    + ".eventshub.metadata m2 where e.source_service='objectpersistenceservice' and e.object_id=e.object_id and e.status='stored' "                    + "and e.event_id=m.event_id and m.name ='Filename' and e.event_id=m2.event_id and m2.name ='Producer' and m.value = "                    + fileName + " order by e.event_id desc");            String sqlQuery = "select * from eventshub.metadata where event_id in ("                + this.jdbcTemplate.queryForObject(query.toString(), Integer.class) + ")";
            List<Map<String, Object>> values = this.jdbcTemplate.queryForList(sqlQuery);            if (values != null && !values.isEmpty()) {                return values;            }        }        return null;    }
    public boolean verifyWorkListTableData(final String feedId, final String filePath) {        boolean flag = false;        File localFile = new File(GenericFunctions.TESTDATA_FILE_PATH);        File[] files = localFile.listFiles();        for (int count = 0; count < files.length; count++) {            String fileName = files[count].getName();            String query =                "select feedId,filename,filepath,consumer_id,ops_retain_until,producer_updated_ts,consumer_updated_ts from "                    + "amgaipdb" + ".worklist.states where filename = '" + fileName + "'";            List<Map<String, Object>> values = this.jdbcTemplate.queryForList(query);            if (values != null && !values.isEmpty()) {                for (Map<String, Object> value : values) {                    for (Iterator<Map.Entry<String, Object>> it = value.entrySet().iterator(); it.hasNext();) {                        Map.Entry<String, Object> entry = it.next();                        String key = entry.getKey();                        Object keyValue = entry.getValue();                        if ((keyValue.equals("(null)"))) {                            return false;                        } else if (key.equals("feedId") && keyValue.equals(feedId)) {                            flag = true;                        } else if (key.equals("filepath") && keyValue.equals(filePath + fileName)) {                            flag = true;                        }                    }                }            }            System.out.println();        }        return flag;    }
}
